# -*- coding: utf-8 -*-
"""ai_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H2sEc9IHUItV6VOaYyG1lYW26zr1Wii2
"""

import pandas as pd
import numpy as np
import math
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error

import tensorflow as tf
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.models import Sequential

data = pd.read_csv('final_dataset.csv')
data.head()

data = data[~(data['date'] == 0)]

data = data[4587:].reset_index(drop=True)

if 'Unnamed: 0' in data.columns:
    data.drop(['Unnamed: 0'], axis=1, inplace=True)
data.columns

mm_obj = MinMaxScaler()
arr = mm_obj.fit_transform(data['price'].values.reshape(-1, 1))
arr.shape

sentiments = data['sentiment']
# sentiments.values
a = arr.copy()
l = []
for i in range(len(a)):
    l.append([a[i][0], sentiments.values[i]])

new_arr = np.array(l)
# new_arr[0:2, 0]

# will be considering for 10 days when predicting, so 10x24hrs
def format_arr(arr):
    X = []
    y = []

    for i in range(len(arr) - 240):
        X.append(arr[i:i+240])
        y.append(arr[i+240, 0])
    X = np.array(X)
    y = np.array(y)

    return X, y

format_arr(new_arr)[0].shape, format_arr(new_arr)[1].shape

X_train, y_train = format_arr(new_arr[ : int(len(new_arr) * 0.8)])
X_test, y_test = format_arr(new_arr[ : len(new_arr) - int(len(new_arr) * 0.8)])

# X_train.shape, y_train.shape, X_test.shape, y_test.shape

X_train, y_train = format_arr(new_arr)

X_train.shape, y_train.shape

myModel = Sequential([
    LSTM(120, return_sequences = True, input_shape = (240, 2)),
    LSTM(100, return_sequences = True),
    LSTM(90),
    Dense(1, activation='linear', kernel_regularizer = tf.keras.regularizers.L2(0.01))
])
myModel.compile(loss = 'mean_squared_error', optimizer = 'adam')
myModel.summary()

myModel.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 120, batch_size = 50, verbose = 1)
# myModel.fit(X_train, y_train, epochs = 120, batch_size = 50, verbose = 1)

import matplotlib.pyplot as plt

plt.plot(myModel.history.history['loss'])

train_prediction = mm_obj.inverse_transform(myModel.predict(X_train))
test_prediction = mm_obj.inverse_transform(myModel.predict(X_test))
print(math.sqrt(mean_squared_error(mm_obj.inverse_transform(y_train.reshape(-1,1)),train_prediction)))
print(math.sqrt(mean_squared_error(mm_obj.inverse_transform(y_test.reshape(-1,1)),test_prediction)))


# mm_obj.inverse_transform(y_train.reshape(-1,1))
# train_prediction

d = pd.read_csv("data.csv")
# d.values

a = d.values
feat = mm_obj.transform(a[:,0].reshape(-1,1))
l = []
for i in range(len(feat)):
    l.append([feat[i][0], a[i,1]])
a = np.array(l)

mm_obj.inverse_transform(myModel.predict(a.reshape(1,a.shape[0], a.shape[1])))

# Commented out IPython magic to ensure Python compatibility.
# %pip install h5py

myModel.save("model.h5")